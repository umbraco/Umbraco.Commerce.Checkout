@inherits UmbracoViewPage
@{
    Layout = "UmbracoCommerceCheckoutLayout.cshtml";

    var store = Model.GetStore();

    var currentOrder = UmbracoCommerceApi.Instance.GetCurrentOrder(store.Id);

    var shippingCountryId = currentOrder.ShippingInfo.CountryId.HasValue
        ? currentOrder.ShippingInfo.CountryId
        : currentOrder.PaymentInfo.CountryId;

    var shippingRegionId = currentOrder.ShippingInfo.CountryId.HasValue
        ? currentOrder.ShippingInfo.RegionId
        : currentOrder.PaymentInfo.RegionId;

    var shippingCountry = shippingCountryId.HasValue
        ? UmbracoCommerceApi.Instance.GetCountry(shippingCountryId.Value)
        : null;

    var shippingRegion = shippingRegionId.HasValue
        ? UmbracoCommerceApi.Instance.GetCountry(shippingRegionId.Value)
        : null;

    var shippingMethods = UmbracoCommerceApi.Instance.GetShippingMethodsAllowedIn(shippingCountryId.Value, shippingRegionId);

    var currentShippingMethodId = currentOrder.ShippingInfo.ShippingMethodId.HasValue
        ? currentOrder.ShippingInfo.ShippingMethodId.Value
        : shippingRegion != null && shippingRegion.DefaultShippingMethodId.HasValue && shippingMethods.Any(x => x.Id == shippingRegion.DefaultShippingMethodId.Value)
            ? shippingRegion.DefaultShippingMethodId.Value
            : shippingCountry != null && shippingCountry.DefaultShippingMethodId.HasValue && shippingMethods.Any(x => x.Id == shippingCountry.DefaultShippingMethodId.Value)
                ? shippingCountry.DefaultShippingMethodId.Value
                : shippingMethods.FirstOrDefault()?.Id;

    var currentShippinOptionId = currentShippingMethodId.HasValue && currentOrder.ShippingInfo.ShippingMethodId.HasValue && currentShippingMethodId == currentOrder.ShippingInfo.ShippingMethodId
        ? currentOrder.ShippingInfo.ShippingOption?.Id
        : null;

    var checkoutPage = Model.GetCheckoutPage();
    var nextStepPage = Model.GetNextStepPage();
}

@using (Html.BeginUmbracoForm("UpdateOrderShippingMethod", "UmbracoCommerceCheckoutSurface"))
{
    <input type="hidden" name="nextStep" value="@(nextStepPage?.Key)" />

    <h3 class="text-xl font-medium mb-4">@Umbraco.GetDictionaryValueOrDefault("UmbracoCommerceCheckout.ShippingMethod", "Shipping Method")</h3>
    <ul class="border border-gray-300 rounded">
        @foreach (var item in shippingMethods.Select((sm, i) => new { ShippingMethod = sm, Index = i }))
        {
            var rates = item.ShippingMethod.TryCalculateRates(currentOrder);
            if (rates.Success)
            {
                foreach (var rate in rates.Result)
                {
                    var isSelected = false;

                    if (currentShippingMethodId.HasValue && currentShippingMethodId.Value == item.ShippingMethod.Id)
                    {
                        if (rate.Option != null)
                        {
                            if (currentShippinOptionId == null)
                            {
                                currentShippinOptionId = rate.Option?.Id;
                                isSelected = true;
                            }
                            else if (currentShippinOptionId == rate.Option?.Id)
                            {
                                isSelected = true;
                            }
                        }
                        else
                        {
                            isSelected = true;
                        }
                    }

                    <li class="border-gray-300 @(item.Index > 0 ? "border-t " : "")">
                        <label class="flex items-center py-4 px-4 cursor-pointer hover:bg-gray-50">
                            <input name="shippingMethod" type="radio" value="@item.ShippingMethod.Id"
                                data-option-id="@rate.Option?.Id"
                                class="mr-3" required 
                                @Html.Raw(isSelected ? " checked=\"checked\"" : "") />
                            <span class="font-medium">
                                @(item.ShippingMethod.Name)
                                @if (rate.Option != null)
                                {
                                    <text> - @rate.Option.Name</text>
                                }
                            </span>
                            <span class="flex-1 text-right">@(rate.Value?.Formatted())</span>
                        </label>
                    </li>
                }
            }
        }
    </ul>

    <input type="hidden" name="shippingOptionId" value="@(currentShippinOptionId)" />
    
    @Html.Partial("~/Views/UmbracoCommerceCheckout/Partials/UmbracoCommerceCheckoutPrevNext.cshtml")
}
